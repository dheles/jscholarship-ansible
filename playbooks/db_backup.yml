---
- name: create working copy of source database
  hosts: db_prod

  tasks:
  - name: install ansible postgres prereqs
    include_role:
      name: postgres
      tasks_from: ansible_prereqs

  - name: set version-specific vars
    include_role:
      name: postgres
      tasks_from: set_vars
    vars:
      upgrading: false
      version_major: "{{ postgres_version_major }}"
      version_minor: "{{ postgres_version_minor }}"

  - name: add pg_hba entry for source database
    include_role:
      name: postgres
      tasks_from: pg_hba_entry
    vars:
      type: "local"
      database: "{{ db_name }}"
      user: "{{ db_user }}"
      method: "md5"
      state: "present"

  - name: add pg_hba entry for database copy
    include_role:
      name: postgres
      tasks_from: pg_hba_entry
    vars:
      type: "local"
      database: "{{ copy_db_name }}"
      user: "{{ db_user }}"
      method: "md5"
      state: "present"

  - name: add pg_hba entry for postgres_admin_user
    include_role:
      name: postgres
      tasks_from: pg_hba_entry
    vars:
      type: "local"
      database: "all"
      user: "{{ postgres_admin_user }}"
      method: "ident"
      state: "present"

  - name: flush handlers so pg_hba changes take effect
    meta: flush_handlers

  - name: add pgpass entry for database copy
    include_role:
      name: postgres
      tasks_from: pgpass
    vars:
      admin_user: "{{ login_user }}"
      admin_group: "{{ login_group }}"
      database: "{{ copy_db_name }}"
      user: "{{ db_user }}"
      password: "{{ db_password }}"
      state: "present"

  - name: add pgpass entry for source database
    include_role:
      name: postgres
      tasks_from: pgpass
    vars:
      admin_user: "{{ login_user }}"
      admin_group: "{{ login_group }}"
      database: "{{ db_name }}"
      user: "{{ db_user }}"
      password: "{{ db_password }}"
      state: "present"

  - name: backup source database
    include_role:
      name: postgres
      tasks_from: backup_db
    vars:
      database: "{{ db_name }}"
      user: "{{ db_user }}"
      backup_file: "{{ db_backup_file }}"

  # TODO: if there are no transform queries, we don't need the copy
  - name: restore database copy from source database
    include_role:
      name: postgres
      tasks_from: restore_db
    vars:
      database: "{{ copy_db_name }}"
      user: "{{ db_user }}"
      backup_file: "{{ db_backup_file }}"

  - name: check transform_queries
    debug: var=db_transform_queries

  - name: run queries to transform database
    include_role:
      name: postgres
      tasks_from: query_db
    vars:
      admin_user: "{{ login_user }}"
      admin_group: "{{ login_group }}"
      database: "{{ copy_db_name }}"
      user: "{{ db_user }}"
      query_file: "queries/{{ item }}"
    with_items: "{{ db_transform_queries }}"
    when: db_transform_queries

  - name: backup database copy
    include_role:
      name: postgres
      tasks_from: backup_db
    vars:
      database: "{{ copy_db_name }}"
      user: "{{ db_user }}"
      backup_file: "{{ copy_backup_file }}"

  - name: drop database copy
    include_role:
      name: postgres
      tasks_from: drop_db
    vars:
      database: "{{ copy_db_name }}"

  - name: remove pg_hba entry for database copy
    include_role:
      name: postgres
      tasks_from: pg_hba_entry
    vars:
      type: "local"
      database: "{{ copy_db_name }}"
      user: "{{ db_user }}"
      method: "md5"
      state: "absent"

  # TODO: review
  - name: remove pg_hba entry for source database
    include_role:
      name: postgres
      tasks_from: pg_hba_entry
    vars:
      type: "local"
      database: "{{ db_name }}"
      user: "{{ db_user }}"
      method: "md5"
      state: "absent"

  - name: flush handlers so pg_hba changes take effect
    meta: flush_handlers

  - name: remove pgpass entry for database copy
    include_role:
      name: postgres
      tasks_from: pgpass
    vars:
      admin_user: "{{ login_user }}"
      admin_group: "{{ login_group }}"
      database: "{{ copy_db_name }}"
      user: "{{ db_user }}"
      password: "{{ db_password }}"
      state: "absent"

  - name: remove pgpass entry for source database
    include_role:
      name: postgres
      tasks_from: pgpass
    vars:
      admin_user: "{{ login_user }}"
      admin_group: "{{ login_group }}"
      database: "{{ db_name }}"
      user: "{{ db_user }}"
      password: "{{ db_password }}"
      state: "absent"

  - name: remove the source backup file from the server
    file:
      path: "{{ db_backup_file }}"
      state: absent
    when: not db_retain_backup
