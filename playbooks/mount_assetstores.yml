---
- name: mount remote assetstores
  hosts: app
  become: true

  tasks:
    - name: simulate remote stores?
      debug:
        var: not remote_stores_available

    - name: set vars that follow from the value of remote_stores_available
      set_fact:
        local_dirs_presence: "absent"
      when: remote_stores_available
    - set_fact:
        local_dirs_presence: "directory"
      when: not remote_stores_available

    - name: create or remove local assetstore directories
      file:
        dest: "{{ dspace_install }}/assetstore/{{ item }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        state: "{{ local_dirs_presence }}"
      with_items: "{{ assetstores }}"
      become: True
      become_user: "{{ app_user }}"

    - name: create the directory to contain the mount or symlink
      file:
        dest: "/mnt/dspace"
        state: directory

    # NOTE: when switching from one mode to another, we need to first undo the existing one
    # a block for each condition is the easiest way to control the order in which this will happen
    - block:
      - name: check to see if we currently have unneeded symlinks
        stat:
          path: /mnt/dspace/storage
        register: sym

      # NOTE: this will delete any items currently in your local assetstore
      - name: destroy symlinks to local assetstore
        file:
          dest: /mnt/dspace/storage
          src: "{{ dspace_install }}/assetstore"
          state: absent
          force: yes
        when: sym.stat.islnk is defined and sym.stat.islnk

      # e.g. sam.mse.jhu.edu:/apps/dspace    /mnt/dspace/storage             nfs     rw,tcp,intr,noatime     0 0
      # or:   /dev/sdc1                                       /mnt/assetstore xfs             defaults        0 0
      - name: mount remote stores
        mount:
          name:   "{{ item.name }}"
          src:    "{{ item.src }}"
          fstype: "{{ item.fstype }}"
          opts:   "{{ item.opts }}"
          state:  "{{ item.state }}"
        with_items: "{{ stores_fstab }}"

      # TODO: currently creates in the first stores_fstab entry.
      # refine to locate the first with state: mounted
      - name: create assetstore directories, if needed
        file:
          dest: "{{ stores_fstab[0].name }}/{{ item }}"
          owner: "{{ app_user }}"
          group: "{{ app_user }}"
          state: "directory"
        with_items: "{{ assetstores }}"
      when: remote_stores_available and stores_fstab != ""

    - block:
      - name: unmount remote stores
        mount:
          name:   "{{ item.name }}"
          src:    "{{ item.src }}"
          fstype: "{{ item.fstype }}"
          opts:   "{{ item.opts }}"
          state:  "{{ item.state }}"
        with_items: "{{ stores_fstab }}"

      - name: create symlinks to local assetstores
        file:
          dest: /mnt/dspace/storage
          src: "{{ dspace_install }}/assetstore"
          owner: "{{ app_user }}"
          group: "{{ app_user }}"
          state: link
          force: yes
      when: not remote_stores_available
